{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\ReactProjects\\\\react-firebase-grid-dashboard\\\\src\\\\firebase\\\\UserProvider.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport firebase from 'firebase/app';\nexport const UserContext = React.createContext();\nexport const UserProvider = props => {\n  const [session, setSession] = useState({\n    user: null,\n    loading: true,\n    isAdmin: false\n  });\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(async user => {\n      let isAdmin = false;\n\n      if (user) {\n        const token = await user.getIdTokenResult();\n        isAdmin = token.claims.admin;\n      }\n\n      setSession({\n        loading: false,\n        user,\n        isAdmin\n      });\n    });\n    return () => unsubscribe();\n  }, []);\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, !session.loading && props.children);\n};\nexport const useSession = () => {\n  const session = useContext(UserContext);\n  return session;\n};","map":{"version":3,"sources":["C:/Users/patri/ReactProjects/react-firebase-grid-dashboard/src/firebase/UserProvider.js"],"names":["React","useEffect","useState","useContext","firebase","UserContext","createContext","UserProvider","props","session","setSession","user","loading","isAdmin","unsubscribe","auth","onAuthStateChanged","token","getIdTokenResult","claims","admin","children","useSession"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,OAAO,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEP,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC;AACrCS,IAAAA,IAAI,EAAE,IAD+B;AAErCC,IAAAA,OAAO,EAAE,IAF4B;AAGrCC,IAAAA,OAAO,EAAE;AAH4B,GAAD,CAAtC;AAMAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,WAAW,GAAGV,QAAQ,CAACW,IAAT,GAAgBC,kBAAhB,CAAmC,MAAOL,IAAP,IAAgB;AACrE,UAAIE,OAAO,GAAG,KAAd;;AAEA,UAAIF,IAAJ,EAAU;AACR,cAAMM,KAAK,GAAG,MAAMN,IAAI,CAACO,gBAAL,EAApB;AACAL,QAAAA,OAAO,GAAGI,KAAK,CAACE,MAAN,CAAaC,KAAvB;AACD;;AAEDV,MAAAA,UAAU,CAAC;AAAEE,QAAAA,OAAO,EAAE,KAAX;AAAkBD,QAAAA,IAAlB;AAAwBE,QAAAA;AAAxB,OAAD,CAAV;AACD,KATmB,CAApB;AAWA,WAAO,MAAMC,WAAW,EAAxB;AACD,GAbQ,EAaN,EAbM,CAAT;AAeA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEL,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACA,OAAO,CAACG,OAAT,IAAoBJ,KAAK,CAACa,QAD7B,CADF;AAKD,CA3BM;AA6BP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAMb,OAAO,GAAGN,UAAU,CAACE,WAAD,CAA1B;AACA,SAAOI,OAAP;AACD,CAHM","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport firebase from 'firebase/app';\n\nexport const UserContext = React.createContext();\n\nexport const UserProvider = (props) => {\n  const [session, setSession] = useState({\n    user: null,\n    loading: true,\n    isAdmin: false,\n  });\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(async (user) => {\n      let isAdmin = false;\n\n      if (user) {\n        const token = await user.getIdTokenResult();\n        isAdmin = token.claims.admin;\n      }\n\n      setSession({ loading: false, user, isAdmin });\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <UserContext.Provider value={session}>\n      {!session.loading && props.children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useSession = () => {\n  const session = useContext(UserContext);\n  return session;\n};\n"]},"metadata":{},"sourceType":"module"}